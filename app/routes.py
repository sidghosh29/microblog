from flask import render_template, flash, redirect, url_for, request, session
from app import app
from app.forms import LoginForm, RegistrationForm, EditProfileForm, EmptyForm, PostForm
from flask_login import current_user, login_user, logout_user, login_required
import sqlalchemy as sa
from app import db
from app.models import User, Post
from urllib.parse import urlsplit
from datetime import datetime, timezone

@app.before_request
def before_request():
    if current_user.is_authenticated:
        current_user.last_seen = datetime.now(timezone.utc)
        db.session.commit()

@app.route('/', methods=['GET', 'POST'])
@app.route('/index', methods=['GET', 'POST'])
@login_required
def index():
    form = PostForm()
    if form.validate_on_submit():
        post = Post(body=form.post.data, author=current_user)
        db.session.add(post)
        db.session.commit()
        flash('Your post is now live!')
        return redirect(url_for('index'))
        # Post/Redirect/Get pattern (https://en.wikipedia.org/wiki/Post/Redirect/Get) avoids inserting duplicate posts 
        # when a user inadvertently refreshes the page after submitting a web form.

        '''
        It is a standard practice to always respond to a POST request generated by a web form submission with a redirect. 
        This helps mitigate an annoyance with how the refresh command is implemented in web browsers. 
        When you hit the refresh key, the web browser just re-issues the last request. 
        If the last request is a POST request with a form submission, then a refresh will re-submit the form. 
        Because this is unexpected, the browser is going to ask the user to confirm the duplicate submission, 
        but most users will not understand what the browser is asking them. If a POST request is answered with a redirect, 
        the browser is instructed to send a GET request to grab the page indicated in the redirect, so now the last request 
        is not a POST request anymore, and the refresh command works in a more predictable way.
        '''
    posts = db.session.scalars(current_user.following_posts()).all()
    return render_template('index.html', title='Home', posts = posts, form = form)

@app.route('/login', methods=['GET', 'POST'])
def login():

    if current_user.is_authenticated:
        return redirect(url_for('index'))

    form = LoginForm()
    '''
    Even though a new LoginForm instance is created when a post request is made, it doesn't mean it starts from a blank state. 
    The form is immediately populated with the data from the current request upon creation.
    WTForms automatically binds the form fields to data from the current request (i.e., request.form if it's a POST request).
    '''
    if form.validate_on_submit():
        # flash('Login requested for user {}, remember_me={}'.format(form.username.data, form.remember_me.data))
        '''
        The flash() function is a useful way to show a message to the user. A lot of applications use this
        technique to let the user know if some action has been successful or not. In this case, I'm going to
        use this mechanism as a temporary solution, because I don't have all the infrastructure necessary to 
        log users in for real yet. The best I can do for now is show a message that confirms that the application
        received the credentials.
        
        When you call the flash() function, Flask stores the message, but flashed messages will not magically 
        appear in web pages. The templates of the application need to render these flashed messages in a way 
        that works for the site layout. These messages will be added to the base template.

        An interesting property of these flashed messages is that once they are requested once through the get_flashed_messages
        function they are removed from the message list, so they appear only once after the flash() function is called.
        '''
        user = db.session.scalar(sa.select(User).where(User.username == form.username.data))
        if user is None or not user.check_password(form.password.data):
            flash('Invalid username or password')
            return redirect(url_for('login'))
        login_user(user, remember=form.remember_me.data)
        next_page = request.args.get('next')
        if not next_page or urlsplit(next_page).netloc != '': 
            next_page = url_for('index')
            # Checking urlsplit(next_page).netloc != '' protects the app from Open Redirect Attacks and Phishing Attacks.
        return redirect(next_page)
    return render_template('login.html', title='Sign In', form=form)
    


@app.route('/logout')
def logout():
    logout_user()
    response = redirect(url_for('index'))
    return response


@app.route('/register', methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        return redirect(url_for('index'))
    form = RegistrationForm()
    if form.validate_on_submit():
        user = User(username=form.username.data, email=form.email.data)
        user.set_password(form.password.data)
        db.session.add(user)
        db.session.commit()
        flash('Congratulations, you are now a registered user!')
        return redirect(url_for('login'))
    return render_template('register.html', title='Register', form=form)


@app.route('/user/<username>')
@login_required
def user(username):
    user = db.first_or_404(sa.select(User).where(User.username == username))
    # In the case that there are no results, the db.first_or_404 method automatically sends a 404 error back to the client.
    posts = [
        {'author': user, 'body': 'Test post #1'},
        {'author': user, 'body': 'Test post #2'}
    ]
    form = EmptyForm()
    return render_template('user.html', user=user, posts=posts, form=form)


@app.route('/edit_profile', methods=['GET', 'POST'])
@login_required
def edit_profile():
    form = EditProfileForm(current_user.username)
    if form.validate_on_submit():
        current_user.username = form.username.data
        current_user.about_me = form.about_me.data
        db.session.commit()
        flash('Your changes have been saved.')
        return redirect(url_for('edit_profile'))
    elif request.method == 'GET':
        form.username.data = current_user.username
        form.about_me.data = current_user.about_me
    return render_template('edit_profile.html', title='Edit Profile',
                           form=form)


@app.route('/follow/<username>', methods=['POST'])
@login_required
def follow(username):
    form = EmptyForm()
    if form.validate_on_submit():
        user = db.session.scalar(
            sa.select(User).where(User.username == username))
        if user is None:
            flash(f'User {username} not found.')
            return redirect(url_for('index'))
        if user == current_user:
            flash('You cannot follow yourself!')
            return redirect(url_for('user', username=username))
        current_user.follow(user)
        db.session.commit()
        flash(f'You are following {username}!')
        return redirect(url_for('user', username=username))
    else:
        return redirect(url_for('index'))


@app.route('/unfollow/<username>', methods=['POST'])
@login_required
def unfollow(username):
    form = EmptyForm()
    if form.validate_on_submit():
        user = db.session.scalar(
            sa.select(User).where(User.username == username))
        if user is None:
            flash(f'User {username} not found.')
            return redirect(url_for('index'))
        if user == current_user:
            flash('You cannot unfollow yourself!')
            return redirect(url_for('user', username=username))
        current_user.unfollow(user)
        db.session.commit()
        flash(f'You are not following {username}.')
        return redirect(url_for('user', username=username))
    else:
        return redirect(url_for('index'))